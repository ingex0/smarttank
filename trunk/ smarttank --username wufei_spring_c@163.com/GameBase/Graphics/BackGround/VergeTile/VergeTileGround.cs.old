using System;
using System.Collections.Generic;
using System.Text;
using Platform.BackGround;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;
using System.IO;
using GameBase.Helpers;

namespace GameBase.Graphics.BackGround.VergeTile
{
    class VergeTileGround : IBackGround
    {
        Rectangle screenViewRect;

        Vector2 mapSize;

        int gridWidth;

        int gridHeight;

        int[] vertexTexIndexs;

        int[] gridTexIndexs;

        VertexBuffer vertexs;
        VertexDeclaration vertexDeclar;

        IndexBuffer indexs;

        Texture2D vertexIndexTex;

        Texture2D gridIndexTex;

        Texture2D[] TexList;

        Effect vergeTileEffect;

        EffectParameter viewStartPosPara;

        EffectParameter viewSizePara;

        EffectParameter mapSizePara;

        EffectParameter screenViewStartPosPara;

        EffectParameter screenViewScalePara;

        EffectParameter gridSizePara;

        EffectParameter vertexIndexTexPara;

        EffectParameter gridIndexTexPara;

        EffectParameter tex1Para;

        EffectParameter tex2Para;

        EffectParameter tex3Para;

        EffectParameter tex4Para;

        EffectParameter tex5Para;

        EffectParameter tex6Para;

        #region Construction

        public VergeTileGround ( VergeTileData data, Rectangle screenViewRect, Vector2 mapSize )
        {
            gridWidth = data.gridWidth;
            gridHeight = data.gridHeight;

            this.screenViewRect = screenViewRect;
            this.mapSize = mapSize;

            vertexTexIndexs = new int[data.vertexTexIndexs.Length];
            data.vertexTexIndexs.CopyTo( vertexTexIndexs, 0 );

            gridTexIndexs = new int[data.gridTexIndexs.Length];
            data.gridTexIndexs.CopyTo( gridTexIndexs, 0 );

            InitialVertexBuffer();

            InitalIndexTex( data );

            InitialTexList( data );

            LoadEffect();
        }

        private void InitialVertexBuffer ()
        {
            vertexDeclar = new VertexDeclaration( BaseGame.Device,
                new VertexElement[]
                { 
                    new VertexElement( 0, 0, VertexElementFormat.Vector2, VertexElementMethod.Default, VertexElementUsage.Position, 0 )
                } );

            Vector2[] pos = new Vector2[(gridWidth + 1) * (gridHeight + 1)];

            for (int y = 0; y <= gridHeight; y++)
            {
                for (int x = 0; x <= gridWidth; x++)
                {
                    pos[x + y * (gridWidth + 1)] = new Vector2( (float)x / (float)gridWidth, (float)y / (float)gridHeight );
                }
            }

            vertexs = new VertexBuffer( BaseGame.Device,
                vertexDeclar.GetVertexStrideSize( 0 ) * (gridWidth + 1) * (gridHeight + 1),
                ResourceUsage.WriteOnly );

            vertexs.SetData<Vector2>( pos );

            uint[] index = new uint[gridWidth * gridHeight * 6];
            int currentIndex = 0;
            for (int y = 0; y < gridWidth; y++)
            {
                for (int x = 0; x < gridHeight; x++)
                {
                    index[currentIndex + 0] = (uint)(x + (gridWidth + 1) * y);
                    index[currentIndex + 1] = (uint)((x + 1) + (gridWidth + 1) * y);
                    index[currentIndex + 2] = (uint)((x + 1) + (gridWidth + 1) * (y + 1));
                    index[currentIndex + 3] = (uint)((x + 1) + (gridWidth + 1) * (y + 1));
                    index[currentIndex + 4] = (uint)(x + (gridWidth + 1) * (y + 1));
                    index[currentIndex + 5] = (uint)(x + (gridWidth + 1) * y);

                    currentIndex += 6;
                }
            }
            indexs = new IndexBuffer( BaseGame.Device, typeof( uint ),
                gridWidth * gridHeight * 6, ResourceUsage.WriteOnly );

            indexs.SetData<uint>( index );

        }

        private void InitalIndexTex ( VergeTileData data )
        {
            vertexIndexTex = new Texture2D( BaseGame.Device, gridWidth + 1, gridHeight + 1, 1, ResourceUsage.None, SurfaceFormat.Alpha8 );
            byte[] index = new byte[(gridWidth + 1) * (gridHeight + 1)];
            for (int i = 0; i < vertexTexIndexs.Length; i++)
            {
                index[i] = (byte)(vertexTexIndexs[i] * 10);
            }

            vertexIndexTex.SetData<byte>( index );

            gridIndexTex = new Texture2D( BaseGame.Device, gridWidth, gridHeight, 1, ResourceUsage.None, SurfaceFormat.Alpha8 );
            byte[] index2 = new byte[gridWidth * gridHeight];
            for (int i = 0; i < gridTexIndexs.Length; i++)
            {
                index2[i] = (byte)(gridTexIndexs[i] * 10);
            }

            gridIndexTex.SetData<byte>( index2 );
        }

        private void InitialTexList ( VergeTileData data )
        {
            TexList = new Texture2D[data.texPaths.Length];
            for (int i = 0; i < data.texPaths.Length; i++)
            {
                TexList[i] = Texture2D.FromFile( BaseGame.Device, data.texPaths[i] );
            }
        }

        private void LoadEffect ()
        {
            vergeTileEffect = BaseGame.Content.Load<Effect>( Path.Combine( Directories.ContentDirectory, "EffectFile\\VergeTileGround" ) );

            viewStartPosPara = vergeTileEffect.Parameters["ViewStartPos"];
            viewSizePara = vergeTileEffect.Parameters["ViewSize"];
            mapSizePara = vergeTileEffect.Parameters["MapSize"];
            screenViewStartPosPara = vergeTileEffect.Parameters["ScrnStartPos"];
            screenViewScalePara = vergeTileEffect.Parameters["ScreenViewScale"];
            gridSizePara = vergeTileEffect.Parameters["GridSize"];

            vertexIndexTexPara = vergeTileEffect.Parameters["vertexIndexMap"];
            gridIndexTexPara = vergeTileEffect.Parameters["gridIndexMap"];

            tex1Para = vergeTileEffect.Parameters["tex1"];
            tex2Para = vergeTileEffect.Parameters["tex2"];
            tex3Para = vergeTileEffect.Parameters["tex3"];
            tex4Para = vergeTileEffect.Parameters["tex4"];
            tex5Para = vergeTileEffect.Parameters["tex5"];
            tex6Para = vergeTileEffect.Parameters["tex6"];


            mapSizePara.SetValue( mapSize );
            screenViewStartPosPara.SetValue( new float[] { (float)(screenViewRect.X) / (float)(BaseGame.ClientRect.Width),
                (float)(screenViewRect.Y) / (float)(BaseGame.ClientRect.Height)} );
            screenViewScalePara.SetValue( new float[]{ (float)(screenViewRect.Width) / (float)(BaseGame.ClientRect.Width ),
                (float)(screenViewRect.Height) / (float)(BaseGame.ClientRect.Height)} );
            gridSizePara.SetValue( new float[] { gridWidth, gridHeight } );

            vertexIndexTexPara.SetValue( vertexIndexTex );
            gridIndexTexPara.SetValue( gridIndexTex );

            int i = 0;
            if (i < TexList.Length)
            {
                tex1Para.SetValue( TexList[i] );
                i++;
            }
            if (i < TexList.Length)
            {
                tex2Para.SetValue( TexList[i] );
                i++;
            }
            if (i < TexList.Length)
            {
                tex3Para.SetValue( TexList[i] );
                i++;
            }
            if (i < TexList.Length)
            {
                tex4Para.SetValue( TexList[i] );
                i++;
            }
            if (i < TexList.Length)
            {
                tex5Para.SetValue( TexList[i] );
                i++;
            }
            if (i < TexList.Length)
            {
                tex6Para.SetValue( TexList[i] );
                i++;
            }
        }

        #endregion

        #region IBackGround ³ÉÔ±

        public void Draw ( GameBase.DataStructure.Rectanglef logicViewRect )
        {
            BaseGame.Device.RenderState.DepthBufferEnable = false;
            BaseGame.Device.RenderState.DepthBufferWriteEnable = false;
            BaseGame.Device.RenderState.AlphaBlendEnable = true;
            BaseGame.Device.RenderState.CullMode = CullMode.None;

            viewStartPosPara.SetValue( new float[] { logicViewRect.X, logicViewRect.Y } );
            viewSizePara.SetValue( new float[] { logicViewRect.Width, logicViewRect.Height } );

            vergeTileEffect.CommitChanges();

            BaseGame.Device.Clear( Color.TransparentBlack );

            vergeTileEffect.CurrentTechnique = vergeTileEffect.Techniques[0];
            vergeTileEffect.Begin();
            vergeTileEffect.CurrentTechnique.Passes[0].Begin();

            BaseGame.Device.VertexDeclaration = vertexDeclar;
            BaseGame.Device.Vertices[0].SetSource( vertexs, 0, vertexDeclar.GetVertexStrideSize( 0 ) );
            BaseGame.Device.Indices = indexs;
            BaseGame.Device.DrawIndexedPrimitives( PrimitiveType.TriangleList, 0, 0, (gridWidth + 1) * (gridHeight + 1), 0, gridWidth * gridHeight * 2 );

            vergeTileEffect.CurrentTechnique.Passes[0].End();
            vergeTileEffect.End();

            BaseGame.Device.RenderState.DepthBufferEnable = true;
            BaseGame.Device.RenderState.DepthBufferWriteEnable = true;
            BaseGame.Device.RenderState.CullMode = CullMode.CullCounterClockwiseFace;
        }

        #endregion
    }
}
