#define DEBUG_Collision

using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Xna.Framework;
using GameBase.Graphics;
using GameBase.DataStructure;
using GameBase.Helpers;

namespace Platform.PhisicalCollision
{
    static class CollisionChecker_1
    {
        static public CollisionCheckResult[] DetectCollision ( LinkedList<ICollider> cols, Border border )
        {
            if (cols.Count == 0) return new CollisionCheckResult[0];

            List<CollisionCheckResult> result = new List<CollisionCheckResult>();

            for (LinkedListNode<ICollider> i = cols.First; i.Next != null; i = i.Next)
            {
                for (LinkedListNode<ICollider> j = i.Next; j != null; j = j.Next)
                {
                    CollisionResult colResult = DetectCollision( i.Value.NextCollideSprites, j.Value.NextCollideSprites );
                    if (colResult.isCollided)
                    {
                        result.Add( new CollisionCheckResult( i.Value, j.Value, colResult ) );
                    }
                }
            }

            foreach (ICollider col in cols)
            {
                CollisionResult colResult = border.DetectCollision( col );
                if (colResult.isCollided)
                    result.Add( new CollisionCheckResult( col, border, colResult ) );
            }

#if DEBUG_Collision
            if (result.Count >= 1)
            {
                Log.Write( "" );
                foreach (CollisionCheckResult re in result)
                {
                    Log.Write( re.ColA.ObjInfo.Script + " " + re.ColB.ObjInfo.Script );
                }
            }
#endif

            return result.ToArray();
        }


        #region OLDCODE
        static public CollisionCheckResult[] DetectCollision ( ICollider colA, LinkedList<ICollider> cols, Border border )
        {
            List<CollisionCheckResult> result = new List<CollisionCheckResult>();

            foreach (ICollider colB in cols)
            {
                if (colB != colA)
                {
                    CollisionResult curResult = DetectCollision( colA.NextCollideSprites, colB.NextCollideSprites );
                    if (curResult.isCollided)
                    {
                        result.Add( new CollisionCheckResult( colA, colB, curResult ) );
                    }
                }
            }
            CollisionResult tempResult = border.DetectCollision( colA );
            if (tempResult.isCollided)
                result.Add( new CollisionCheckResult( colA, border, tempResult ) );

            return result.ToArray();
        } 
        #endregion

        static public CollisionCheckResult[] DetectCollision ( CollisionCheckResult checkResult, LinkedList<ICollider> colliders, Border border )
        {
            List<CollisionCheckResult> result = new List<CollisionCheckResult>();


            bool colAisPhisical = false;
            bool colBisPhisical = false;

            if (checkResult.ColA is IPhisicalUpdater)
                colAisPhisical = true;

            if (checkResult.ColB is IPhisicalUpdater)
                colBisPhisical = true;

            foreach (ICollider col in colliders)
            {
                if (col != checkResult.ColA && col != checkResult.ColB)
                {
                    if (colAisPhisical)
                    {
                        CollisionResult curResult = DetectCollision( checkResult.ColA, col );
                        if (curResult.isCollided)
                        {
                            result.Add( new CollisionCheckResult( checkResult.ColA, col, curResult ) );
                        }
                    }
                    if (colBisPhisical)
                    {
                        CollisionResult curResult = DetectCollision( checkResult.ColB, col );
                        if (curResult.isCollided)
                        {
                            result.Add( new CollisionCheckResult( checkResult.ColB, col, curResult ) );
                        }
                    }
                }
            }

            if (colAisPhisical && colBisPhisical)
            {
                CollisionResult tempResult = DetectCollision( checkResult.ColA, checkResult.ColB );
                if (tempResult.isCollided)
                {
                    result.Add( new CollisionCheckResult( checkResult.ColA, checkResult.ColB, tempResult ) );
                } 
            }

            if (colAisPhisical)
            {
                CollisionResult tempResult = border.DetectCollision( checkResult.ColA );
                if (tempResult.isCollided)
                {
                    result.Add( new CollisionCheckResult( checkResult.ColA, border, tempResult ) );
                } 
            }

            if (colBisPhisical)
            {
                CollisionResult tempResult = border.DetectCollision( checkResult.ColB );
                if (tempResult.isCollided)
                {
                    result.Add( new CollisionCheckResult( checkResult.ColB, border, tempResult ) );
                } 
            }

            return result.ToArray();
        }


        static public CollisionResult DetectCollision ( Sprite[] spritesA, Sprite[] spritesB )
        {
            foreach (Sprite spriteA in spritesA)
            {
                foreach (Sprite spriteB in spritesB)
                {
                    CollisionResult result = Sprite.IntersectPixels( spriteA, spriteB );
                    if (result.isCollided)
                        return result;
                }
            }
            return new CollisionResult( false );
        }

        static public CollisionResult DetectCollision ( ICollider colA, ICollider colB )
        {
            return DetectCollision( colA.NextCollideSprites, colB.NextCollideSprites );
        }

    }


    public struct CollisionCheckResult
    {
        public ICollider ColA;
        public ICollider ColB;
        public CollisionResult CollisionResult;

        public CollisionCheckResult ( ICollider colA, ICollider colB, CollisionResult collisionResult )
        {
            this.ColA = colA;
            this.ColB = colB;
            this.CollisionResult = collisionResult;
        }
    }
    
}
