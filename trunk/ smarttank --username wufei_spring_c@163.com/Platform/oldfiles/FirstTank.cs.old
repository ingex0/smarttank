using System;
using System.Collections.Generic;
using System.Text;
using GameBase.Graphics;
using GameBase.Helpers;
using System.IO;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using GameBase;
using GameBase.Interfaces;
using Platform.Logic.Phisics;
namespace Platform.GameObjects.Tank.Tanks
{
    public class FirstTank : Tank
    {

        #region Variables
        const float TextureScale = 0.1f;


        Sprite baseSprite;
        Sprite turretSprite;

        // 暂时设置为公有，方便测试

        //public float turretRota;
        float turretRota;
        TurretLinker turretLinker;

        private NewtonPhisicalStatus phistat;
        private NewtonPhisicalStatus next;
        private IPhisicalStrategy strategy;
        private TankLimits limit;
        private TankActionStatus actionstat;

        #endregion

        #region Properties

        public Vector2 Direction
        {
            get
            {
                return phistat.DirectionVector;
            }

        }

        public IPhisicalStrategy PhisicalStrategy
        {
            set { this.strategy = value; }

        }
        public TankLimits Limits
        {
            set { this.limit = value; }
            get { return this.limit; }

        }

        public override TankActionStatus ActionStatus
        {
            get { return actionstat; }
        }


        public override NewtonPhisicalStatus NewtonPhisicalStatus
        {
            get
            {
                return phistat;
            }
            public set
            {
                this.phistat = value;
            }
        }

        public override ITankController_Origin Controller
        {
            get { return this.controller; }
        }

        public override Sprite CollideSprite
        {
            get { return baseSprite; }
        }

        #endregion

        #region Constuction

        public FirstTank ( Vector2 bornPos, float rota )
        {
            phistat = new NewtonPhisicalStatus();
            phistat.Position = bornPos;
            phistat.DirectionRadius = rota;
            phistat.Weight = 200;
            phistat.Inertia = 200 * phistat.Weight;
            phistat.FrictionFactor = 0.5f;
            this.controller = new TankController( this );
            turretRota = 0f;
            this.strategy = new NewtonStrategy();
            this.actionstat = new TankActionStatus();
        }

        #endregion

        public override void Initialize ()
        {
            turretLinker = new TurretLinker( new Vector2( 82, 137 ), new Vector2( 82, 162 ), TextureScale );

            baseSprite = new Sprite();
            baseSprite.LoadTextureFromContent( Path.Combine( Directories.TankTexture, "M60\\base" ), true );
            baseSprite.SetParameters( new Vector2( 82, 162 ), phistat.Position, TextureScale, 0f, Color.White, 0.2f/*需要统一安排*/, SpriteBlendMode.AlphaBlend );


            turretSprite = new Sprite();
            turretSprite.LoadTextureFromContent( Path.Combine( Directories.TankTexture, "M60\\turret" ), true );
            turretSprite.SetParameters( new Vector2( 70, 234 ), turretLinker.GetTexturePos( phistat.Position, phistat.DirectionRadius ), TextureScale, turretRota, Color.White, 0.1f, SpriteBlendMode.AlphaBlend );

        }

        private void UpdateSpriteParameters ()
        {
            baseSprite.Pos = phistat.Position;
            baseSprite.Rata = phistat.DirectionRadius + (float)Math.PI / 2;
            turretSprite.Pos = turretLinker.GetTexturePos( phistat.Position, phistat.DirectionRadius );
            turretSprite.Rata = phistat.DirectionRadius + turretRota + (float)Math.PI / 2;
        }

        public override void Draw ()
        {
            UpdateSpriteParameters();

            baseSprite.Draw();
            turretSprite.Draw();
        }

        public override void HandleCollideWith ( CollisionResult result, Platform.Logic.Collision.ICollidable objB )
        {


        }




        #region IPhisical 成员及相关

        public override void prepareNextStatus ( float millisecond )
        {
            switch (actionstat.EngineStatus)
            {
                case TankEngineStatus.Stop: phistat.Force = 0; break;
                case TankEngineStatus.Forward: phistat.Force = limit.MaxForce; break;
                case TankEngineStatus.Backward: phistat.Force = -limit.MaxForce; break;

            }
            switch (actionstat.RotatorStatus)
            {
                case TankRotatorStatus.Left: phistat.Moment = -limit.MaxMoment; break;
                case TankRotatorStatus.Right: phistat.Moment = limit.MaxMoment; break;
                case TankRotatorStatus.Stop: phistat.Moment = 0; break;

            }
            //switch (actionstat.turret) { }
            next = strategy.getNextStatus(
                //limit.HandleLimits( this.NewtonPhisicalStatus, actionstat )
                this.NewtonPhisicalStatus
                , millisecond );
            next.Force = phistat.Force;
            next.Moment = phistat.Moment;
        }

        public override void validate ()
        {
            this.phistat = next;
            this.UpdateSpriteParameters();
        }

        #endregion

        #region 控制

        private class TankController : ITankController_Origin
        {
            public TankController ( FirstTank target )
            {
                this.target = target;
            }
            public void LeftTurn ()
            {
                lock (target)
                    target.actionstat.RotatorStatus = TankRotatorStatus.Left;

            }

            public void RightTurn ()
            {
                lock (target)
                    target.actionstat.RotatorStatus = TankRotatorStatus.Right;
                //target.phistat.Moment = target.limit.MaxMoment ;
            }
            public void StopTurning ()
            {
                lock (target)
                    target.actionstat.RotatorStatus = TankRotatorStatus.Stop;
            }
            public void MoveForward ()
            {
                lock (target)
                    target.actionstat.EngineStatus = TankEngineStatus.Forward;
            }
            public void MoveBackward ()
            {
                lock (target)
                    target.actionstat.EngineStatus = TankEngineStatus.Backward;
            }
            public void StopMoving ()
            {
                lock (target)
                {
                    target.actionstat.EngineStatus = TankEngineStatus.Stop;
                }
            }
            public void StopAll ()
            {
                lock (target)
                {
                    StopTurning();
                    StopMoving();
                }
            }
            private FirstTank target;

        }
        private ITankController_Origin controller;

        #endregion

    }
}
