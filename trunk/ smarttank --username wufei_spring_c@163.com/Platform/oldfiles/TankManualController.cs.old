using System;
using System.Collections.Generic;
using System.Text;

using Microsoft.Xna.Framework.Input;
namespace Platform.GameObjects.Tank
{
    public class TankManualController
    {
        public TankManualController ( ITankController_Origin con )
        {
            this.controller = con;
        }
        private Keys Forward = Keys.W;
        private Keys Backward = Keys.S;
        private Keys Left = Keys.A;
        private Keys Right = Keys.D;
        private ITankController_Origin controller;
        private TankEngineStatus engine = TankEngineStatus.Stop;
        private TankRotatorStatus rotator = TankRotatorStatus.Stop;
        public void HandleKeyStatus ( KeyboardState state )
        {

            HandleMoving( state );
            HandleTurning( state );
            ApplyControl();

        }
        private void HandleMoving ( KeyboardState state )
        {
            bool forward = state.IsKeyDown( Forward );
            bool backward = state.IsKeyDown( Backward );
            if (forward == backward)
            {
                engine = TankEngineStatus.Stop;
                return;
            }
            if (forward)
            {
                engine = TankEngineStatus.Forward;
            }
            else
            {
                engine = TankEngineStatus.Backward;
            }

        }
        private void HandleTurning ( KeyboardState state )
        {
            bool left = state.IsKeyDown( this.Left );
            bool right = state.IsKeyDown( this.Right );
            if (left == right)
            {
                rotator = TankRotatorStatus.Stop;
                return;
            }
            if (left)
            {
                rotator = TankRotatorStatus.Left;
            }
            else
            {
                rotator = TankRotatorStatus.Right;
            }

        }
        private void ApplyControl ()
        {
            switch (engine)
            {
                case TankEngineStatus.Stop: controller.StopMoving(); break;
                case TankEngineStatus.Forward: controller.MoveForward(); break;
                case TankEngineStatus.Backward: controller.MoveBackward(); break;

            }
            switch (rotator)
            {
                case TankRotatorStatus.Left: controller.LeftTurn(); break;
                case TankRotatorStatus.Right: controller.RightTurn(); break;
                case TankRotatorStatus.Stop: controller.StopTurning(); break;

            }


        }




    }
}
