using System;
using System.Collections.Generic;
using System.Text;
using GameBase;
using Platform.Logic.Phisics;
using Platform.Logic.Collision;
using GameBase.Interfaces;
using Platform.Logic.Registers;
using Microsoft.Xna.Framework;


namespace Platform.Logic.GameBackground
{
    public class GameDataBase
    {
        private AbstractRegister<Platform.GameDraw.IDrawable> Drawables;
        private AbstractRegister<IPhisical> Phisicals;
        private AbstractRegister<ICollidable> Collidables;
        private ICollisionStrategy collision;
        public GameDataBase ()
        {
            Drawables = ObjectRegister<Platform.GameDraw.IDrawable>.getInstance();
            Drawables.removeAll();
            Phisicals = ObjectRegister<IPhisical>.getInstance();
            Phisicals.removeAll();
            Collidables = ObjectRegister<ICollidable>.getInstance();
            Collidables.removeAll();
            collision = new PixCollisionStrategy();

        }
        public void Update ( float millisecond )
        {
            UpdatePhisical( millisecond );
            CheckCollision();

        }
        public void Draw ()
        {
            foreach (Platform.GameDraw.IDrawable obj in Drawables.Objects)
            {
                obj.Draw();
            }
        }

        protected virtual void UpdatePhisical ( float millisecond )
        {

            foreach (IPhisical obj in Phisicals.Objects)
            {
                lock (obj)
                {
                    obj.prepareNextStatus( millisecond );
                    obj.validate();
                }
            }
        }

        protected virtual void CheckCollision ()
        {
            collision.checkCollision( Collidables );

        }

        public virtual void addElement ( Object obj )
        {
            bool success = false;
            if (obj is Platform.GameDraw.IDrawable)
            {
                Drawables.add( (Platform.GameDraw.IDrawable)obj );
                success = true;
            }
            if (obj is IPhisical)
            {
                Phisicals.add( (IPhisical)obj );
                success = true;
            }
            if (obj is ICollidable)
            {

                Collidables.add( (ICollidable)obj );
                success = true;
            }
            if (!success) throw new Exception( "UNKNOWN OBJECT TYPE" );

        }

        public virtual void removeElement ( Object obj )
        {
            bool success = false;
            if (obj is IDrawable)
            {
                Drawables.remove( (Platform.GameDraw.IDrawable)obj );
                success = true;
            }
            if (obj is IPhisical)
            {
                Phisicals.remove( (IPhisical)obj );
                success = true;
            }
            if (obj is ICollidable)
            {

                Collidables.remove( (ICollidable)obj );
                success = true;
            }
            if (!success) throw new Exception( "UNKNOWN OBJECT TYPE" );
        }
    }
}
