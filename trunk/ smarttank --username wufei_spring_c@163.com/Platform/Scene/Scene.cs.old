using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using Platform.GameObjects;
using GameBase.DataStructure;
using Platform.GameDraw;
using Platform.PhisicalCollision;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using Platform.Visibility;

namespace Platform.Scene
{

    /*
     * 能够从文件中读取场景信息来初始化场景。或是将当前的场景信息保存到文件中。(尚未实现）
     *  
     * 
     * 同时，此类管理场景物体之间的碰撞关系和遮挡关系这两个二元关系。
     * 
     * 此类中将场景物体分为凹陷固定物体、低突出固定物体、高突出固定物体、地面运动物体、低空运动物体、高空运动物体。还要考虑边界。
     * 
     * 他们之间的碰撞关系如下：
     * 
     *      （地面运动物体，凹陷固定物体）
     *      （地面运动物体，低突出固定物体）
     *      （地面运动物体，高突出固定物体）
     *      （地面运动物体，边界）；也可将边界包含到某类固定物体中。
     *      （地面运动物体）
     *      
     *      （低空运动物体，高突出固定物体）
     *      （低空运动物体，地面运动物体）
     *      
     * 
     * 注册碰撞组的过程是可以在继承类中修改的。
     * 
     * 
     * 
     * */
    [Serializable]
    class Scene
    {
        #region GameObj Keepers

        /// <summary>
        /// 凹陷固定物体[Col]
        /// </summary>
        protected MultiLinkedList<IGameObjCol> concaves;

        /// <summary>
        /// 低突出固定物体[Col]
        /// </summary>
        protected MultiLinkedList<IGameObjCol> lowBulges;

        /// <summary>
        /// 高突出固定物体[ColShe]
        /// </summary>
        protected MultiLinkedList<IGameObjColShe> highBulges;

        /// <summary>
        /// 地面运动遮挡物体[ColPhiShe]
        /// </summary>
        protected MultiLinkedList<IGameObjColPhiShe> groundPhiShes;

        /// <summary>
        /// 地面运动非遮挡物体[ColPhi]
        /// </summary>
        protected MultiLinkedList<IGameObjColPhi> groundPhis;

        /// <summary>
        /// 低空运动物体[ColPhi]
        /// </summary>
        protected MultiLinkedList<IGameObjColPhi> lowAirPhis;

        /// <summary>
        /// 高空运动物体[Phi]
        /// </summary>
        protected MultiLinkedList<IGameObjPhi> highAirPhis;

        //protected MultiLinkedList<IGameObjColPhiRad> 


        /// <summary>
        /// 边界[Col]
        /// </summary>
        protected Border border;


        #endregion

        #region Construction

        public Scene ()
        {
            concaves = new MultiLinkedList<IGameObjCol>();
            groundPhiShes = new MultiLinkedList<IGameObjColPhiShe>();
            groundPhis = new MultiLinkedList<IGameObjColPhi>();
            lowBulges = new MultiLinkedList<IGameObjCol>();
            highBulges = new MultiLinkedList<IGameObjColShe>();
            lowAirPhis = new MultiLinkedList<IGameObjColPhi>();
            highAirPhis = new MultiLinkedList<IGameObjPhi>();

            Initial();
        }

        protected virtual void Initial ()
        {
            border = new Border( 0, 300, 0, 200 );
        }

        #endregion

        #region RegistPhiColGroups

        protected virtual void RegistPhiColGroups ( PhiColManager manager )
        {
            IEnumerable<ICollideObj> groundPhisColIter = groundPhis.GetConvertList<ICollideObj>();
            IEnumerable<IPhisicalObj> groundPhisPhiIter = groundPhis.GetConvertList<IPhisicalObj>();

            IEnumerable<ICollideObj> concavesColIter = concaves.GetConvertList<ICollideObj>();

            IEnumerable<ICollideObj> lowBulgesColIter = lowBulges.GetConvertList<ICollideObj>();

            IEnumerable<ICollideObj> highBulgesColIter = highBulges.GetConvertList<ICollideObj>();

            IEnumerable<ICollideObj> lowAirPhisColIter = lowAirPhis.GetConvertList<ICollideObj>();
            IEnumerable<IPhisicalObj> lowAirPhisPhiIter = lowAirPhis.GetConvertList<IPhisicalObj>();

            IEnumerable<IPhisicalObj> highAirPhisPhiIter = highAirPhis.GetConvertList<IPhisicalObj>();


            manager.AddPhiGroup( groundPhisPhiIter );
            manager.AddPhiGroup( lowAirPhisPhiIter );
            manager.AddPhiGroup( highAirPhisPhiIter );

            manager.AddColGroup( groundPhisColIter );
            manager.AddColGroup( groundPhisColIter, concavesColIter );
            manager.AddColGroup( groundPhisColIter, lowBulgesColIter );
            manager.AddColGroup( groundPhisColIter, highBulgesColIter );
            manager.AddColGroup( groundPhisColIter, lowAirPhisColIter );
            manager.AddColGroup( groundPhisColIter, new ICollideObj[] { border } );

            manager.AddColGroup( lowAirPhisColIter, highBulgesColIter );
        }

        #endregion

        #region RegistDrawables

        protected virtual void RegistDrawables ( DrawManager drawManager )
        {
            IEnumerable<IDrawable> groundDrawIter = groundPhis.GetConvertList<IDrawable>();
            IEnumerable<IDrawable> concavesDrawIter = concaves.GetConvertList<IDrawable>();
            IEnumerable<IDrawable> lowBulgesDrawIter = lowBulges.GetConvertList<IDrawable>();
            IEnumerable<IDrawable> highBulgesDrawIter = highBulges.GetConvertList<IDrawable>();
            IEnumerable<IDrawable> lowAirPhiDrawIter = lowAirPhis.GetConvertList<IDrawable>();
            IEnumerable<IDrawable> highAirPhiDrawIter = highAirPhis.GetConvertList<IDrawable>();

            drawManager.AddGroup( groundDrawIter );
            drawManager.AddGroup( concavesDrawIter );
            drawManager.AddGroup( lowBulgesDrawIter );
            drawManager.AddGroup( highBulgesDrawIter );
            drawManager.AddGroup( lowAirPhiDrawIter );
            drawManager.AddGroup( highAirPhiDrawIter );
        }

        #endregion

        #region RegistShelterGroups

        protected virtual void RegistShelterGroups ( ShelterManager shelterManager )
        {

        }

        #endregion

        #region Add & Remove GameObj

        /* 由于MultiLinkedList的内建机制，只需要在
         * 
         * 不同类的MultiLinkedList中添加移除物体即可。
         * 
         * 所有的副本将自动与母体一起更新。
         * 
         * */

        public bool AddConcave ( IGameObjCol obj )
        {
            return concaves.AddLast( obj );
        }
        public bool RemoveConcave ( IGameObjCol obj )
        {
            return concaves.Remove( obj );
        }

        public bool AddLowBulges ( IGameObjCol obj )
        {
            return lowBulges.AddLast( obj );
        }
        public bool RemoveLowBluges ( IGameObjCol obj )
        {
            return lowBulges.Remove( obj );
        }

        public bool AddHighBulges ( IGameObjColShe obj )
        {
            return highBulges.AddLast( obj );
        }
        public bool RemoveHighBulges ( IGameObjColShe obj )
        {
            return highBulges.Remove( obj );
        }

        public bool AddLowAirPhi ( IGameObjColPhi obj )
        {
            return lowAirPhis.AddLast( obj );
        }
        public bool RemoveLowAirPhi ( IGameObjColPhi obj )
        {
            return lowAirPhis.AddLast( obj );
        }

        public bool AddHighAirPhi ( IGameObjPhi obj )
        {
            return highAirPhis.AddLast( obj );
        }
        public bool RemoveHighAirPhi ( IGameObjPhi obj )
        {
            return highAirPhis.Remove( obj );
        }

        public bool AddGroundPhi ( IGameObjColPhi obj )
        {
            return groundPhis.AddLast( obj );
        }
        public bool RemoveGroundPhi ( IGameObjColPhi obj )
        {
            return groundPhis.Remove( obj );
        }

        public bool AddGroundPhiShe ( IGameObjColPhiShe obj )
        {
            return groundPhiShes.AddLast( obj );
        }
        public bool RemoveGroundPhiShe ( IGameObjColPhiShe obj )
        {
            return groundPhiShes.Remove( obj );
        }
        #endregion

        #region Load & Save a Scene

        /* 因使用了C#语言的内建序列化机制。
         * 
         * 所以一切需要保存的对象都需要用[Serializable]进行标记。
         * 
         * */

        static public Scene LoadFromFile ( string relativeFilepath )
        {
            IFormatter formatter = new BinaryFormatter();
            Stream stream = GameBase.Helpers.FileHelper.LoadGameContentFile( relativeFilepath );
            Scene result = (Scene)formatter.Deserialize( stream );
            stream.Close();
            return result;
        }

        static public void SaveToFile ( string relativeFilePath, Scene scene )
        {
            IFormatter formatter = new BinaryFormatter();
            Stream stream = GameBase.Helpers.FileHelper.SaveGameContentFile( relativeFilePath );
            formatter.Serialize( stream, scene );
            stream.Close();
        }

        #endregion
    }
}
