原有的场景管理部分面临以下几个问题：

SceneKeeperCommon对场景物体的分类情况考虑不足。

地图编辑器如何与场景管理结合起来？






先考虑后一个问题：地图编辑器如何与场景管理结合起来？


这同时也涉及到一个问题，场景的各异性究竟有多大？

一个通常的场景必然会包含以下几个类型的场景物体。

场景阻挡物（静止的）、游戏主体、场景修饰物。

那么炮弹又属于什么呢？它和部分场景物体之间是可重叠的关系，又跟一些场景物体之间是碰撞的关系。

对于这个问题的，可能的解决办法是不对不同的场景物体做分层式的分类工作。而将配置关系的工作留给具体的场景管理来完成。

这样我们可以采用脚本的方式来编辑场景。

如果要这样的话，那么规则类的行为方式也要改变：不再创建场景物体，而是通过场景物体管理类来获得已经创建好的实例。

这又有一个问题，我们需要在脚本中包含场景物体对应类的信息。这样场景物体管理类才能生成场景物体的实例。

并且规则类获得场景物体实例的函数返回值类型只能是IGameObj，需要类型转换。这点到还不太重要。

场景物体编辑器采用所见既所得的方式吗？这样确实有很多优势。

比如在编辑器中看到的场景物体与游戏中的场景物体类型是完全一样的，这样通过反射我们可以在场景编辑器中设置物体的全部属性。

然而有些场景物体是动态生成的，比如坦克发出的炮弹，或者是会刷新的NPC。这样的东西不便于在静止的场景编辑器编辑，所以还是需要规则类的管理。

比如在场景编辑器中指定几个存放一类关系类别的物体的容器。然后规则类可以获取他们。

希望场景编辑器中做出的修改在不需要重新编译，甚至不需要重新启动游戏的情况下就能生效。为了这一点，需要明确规则类和脚本之间的具体联系方式。

另外需要考虑的一点是物体类的创建过程是怎样的。因为一个物体类的创建是与物体编辑器中编辑出来的信息有关的，也可能与其他一些信息有关。

我们需要一种方法来在场景编辑器中指定物体类的创建方式。并且在游戏中生成物体实例的时候重现这个创建过程。

但突然有了一个想法。能不能依然在规则类中创建物体实例，但在创建了以后使用脚本来编辑物体的属性呢？？？

如果可行的话，脚本或许能成为一个可选择的因素，简单的场景和简单的游戏规则，我们可以直接用代码来实现，但复杂一些的场景，我们可以用编辑器来修改。

称之为二次编辑。

但这也导致了一个问题，物体的创建需要经过重新编译。这显然是一个很大的弊端。

回到45行，注意到：	物体类 + 具体化 = 场景物体的一种表现形。我们可以通过代码的形式生成物体的表现形，然后用脚本的方式编辑这些表现形。

这当中依然有简化的余地。如果具体化只与场景物体的皮肤有关，那么我们只要为一个类的构造函数指定一个皮肤的XML文件便可以了。

然而有些情况并非如此理想，比如坦克的初始化还需要后座长度这样的数据。

而且物体的创建过程可能是复杂和曲折的，比如TankSinTur的创建过程涉及到TankSinTurSkin的创建。而TankSinTurSkin又涉及到TankSinTurSkinData的创建。

那么我们建立一些简单的接口来封装这样的创建过程。例如定义一些可以被场景编辑器接受的构造方法。

这样的简化类通过反射的方法被场景编辑器创建，然后序列化成脚本。接着在游戏中被重现。




停止遐想。需要解决的是以下的问题：

首先将从物体类到场景物体的具体化过程变得仅与物体编辑器中的参数（也就是物体XML文件）有关。

也就是要修改物体编辑器，使之能够编辑更多形式的物体参数。更好的想法是在物体编辑器中能够加载物体类，并根据这个物体类提供所需参数。（已完成）

然后要解决在场景编辑器中动态加载物体类并创建物体类实例的过程。

场景编辑器需要能够管理表现形。

